buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' } // <--- вот это ДОБАВЬ
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.example.energyhud'
archivesBaseName = 'energyhud'

sourceCompatibility = targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven { url = 'https://maven.minecraftforge.net' } // <--- и вот это тоже
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    implementation fg.deobf(name: 'Mekanism-CE-Unofficial-All-1.12.2-9.9.1.222')

    implementation fg.deobf(fileTree(dir: 'libs', include: ['RedstoneFlux-1.12-2.1.0.6.jar']))
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "EnergyHUD",
                "Specification-Vendor"    : "YourNameHere",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "YourNameHere",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.register('autoGitPush') {
    doLast {
        println '📦 Git add...'
        "git add .".execute().waitFor()

        def status = "git status --porcelain".execute().text.trim()
        if (!status.isEmpty()) {
            println '📝 Git commit...'
            "git commit -m \"Auto commit after build\"".execute().waitFor()
        } else {
            println '✅ No changes to commit.'
        }

        println '🚀 Git push...'
        "git push origin HEAD".execute().waitFor()
    }
}

build.finalizedBy('autoGitPush')

task autoGitPushOnFailure {
    doLast {
        def logFile = file("build-error.log") // сохраняем в корне, а не в build/

        try {
            exec {
                commandLine './gradlew', 'build'
            }
        } catch (Exception e) {
            // сохраняем лог ошибки
            logFile.text = "Build failed: ${e.message}\n\n${e.getStackTrace().join('\n')}"

            // git commit + push
            exec { commandLine 'git', 'add', '.' }
            exec { commandLine 'git', 'add', logFile.path }
            exec { commandLine 'git', 'commit', '-m', "❌ Build failed: ${new Date().format("yyyy-MM-dd HH:mm:ss")}" }
            exec { commandLine 'git', 'push' }
        }
    }
}